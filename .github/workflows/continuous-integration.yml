name: Fabric Market Data Products CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Versions found in Fabric Runtime: https://learn.microsoft.com/en-us/fabric/data-engineering/runtime-1-3
env:
  JAVA_VERSION: '11'
  PYTHON_VERSION: '3.11'

jobs:
  run_unit_tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'adopt'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('testing/unit-tests-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
  
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r testing/unit-tests-requirements.txt

    - name: Create SparkJobDefinition Symlinks
      run: |
        # Loop through all SparkJobDefinition fabric items.
        for dir in $(find fabric -type d -name "*.SparkJobDefinition"); do
          base_dir=$(basename $dir)
          
          # Loop through all subdirectories within the current SparkJobDefinition directory.
          for sub_dir in $PWD/$dir/*; do
            sub_dir_name=$(basename $sub_dir)
            
            # Check if the subdirectory exists in both the fabric and testing directories.
            if [ ! -d "$PWD/$dir/$sub_dir_name" ]; then continue; fi
            if [ ! -d "$PWD/testing/$base_dir/$sub_dir_name" ]; then continue; fi
            
            # Loop through each file in the current subdirectory and create a symbolic link
            # to the file in the corresponding subdirectory in the testing directory.
            for file in $PWD/$dir/$sub_dir_name/*; do
              ln -s $file $PWD/testing/$base_dir/$sub_dir_name/$(basename $file)
            done
          done
        done

    - name: Run Python tests in testing folder
      run: |
        pytest testing
